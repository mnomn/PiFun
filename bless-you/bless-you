#!/usr/bin/python
import logging
import time
from bluepy.btle import Scanner, DefaultDelegate
import paho.mqtt.publish as publish
import sys
from ConfigParser import ConfigParser
import os
import requests
import json

dbg=False

# Internal

if len(sys.argv) > 1 and sys.argv[1]=="-d":
    logging.basicConfig(level=logging.DEBUG)
    dbg=True
else:
    logging.basicConfig(level=logging.INFO)

#logging.basicConfig(level=logging.DEBUG)
lastUpdate = {}

logging.debug("Debug is enabled!")

def dump(dev):

    print "###########", dev.addr, time.ctime()
    for (adtype, desc, value) in dev.getScanData():
        print "  %s (%d) = %s" % (desc, adtype, value)

def handleBle(dev):
    # Only use known device:
    da = dev.addr.lower()
    if dbg:
        logging.info( "Addr: "  + da)
    if (not da in mqtt_macs) and (not da in ifttt_macs):
        return

    now = time.time()
    old = 0
    if dev.addr in lastUpdate:
        old = lastUpdate[dev.addr]
    logging.info( "Time:"  + str(now) + ", diff: " + str(now-old))
    if now-old > 5:
        valDict = None
        val="00000000"
        if dev.getValueText(2):
            logging.info("VAL2: " + dev.getValueText(2))
            val=dev.getValueText(2)
        if dev.getValueText(3):
            logging.info("VAL3: " + dev.getValueText(3))
        if dev.getValueText(22):
            val = dev.getValueText(22)
            logging.info("VAL 22" + val)
            # Is this generic format for eddystone
            if val.startswith("aafe") and len(val)==40 :
                vv1=val[4:16]
                vv2=val[16:28]
                vv3=val[28:40]
                valDict = {'value1': int(vv1,16),
                           'value2': int(vv2,16),
                           'value3': int(vv3,16)}

        lastUpdate[da] = now
        parts = da.split(":")
        tail = "XX"
        if len(parts) == 6:
            tail = parts[4] + parts[5]
        if da in ifttt_macs:
            url = "https://maker.ifttt.com/trigger/"
            url += "ble_" + tail
            url += "/with/key/"
            url += ifttt_key
            if valDict:
                payload = valDict
            else:
                payload = {'value1': val}

            logging.info("Post to ifttt with event ble_" + tail)
            r = requests.post(url, json=payload)

        if da in mqtt_macs:
            topic = "ble/" + tail
            if valDict:
                val = json.dumps(valDict)
            logging.info("Post to topic:" + topic + ", uuid:" + val)
            au = {"username":mqtt_user, "password":mqtt_pass}
            # Do not ratein. Not suitable for events like this.
            publish.single(topic, val, hostname=mqtt_server, port=mqtt_port, auth=au)

class ScanDelegate(DefaultDelegate):
    def __init__(self):
        DefaultDelegate.__init__(self)

    def handleDiscovery(self, dev, isNewDev, isNewData):
        if dbg:
            dump(dev)

        handleBle(dev)

# Read config
parser = ConfigParser()

cfgs=[os.path.expanduser("~") + "/.bless-you.conf", "/usr/local/etc/bless-you.conf", "/usr/etc/bless-you.conf"]

def getConf(parser, section, option, default=""):
    if parser.has_option(section, option):
        return parser.get(section, option)
    else:
        return default

for cfg in cfgs:
    logging.debug("Try to read: " + cfg)
    r = parser.read(cfg)
    if len(r) > 0:
        logging.info("Using config " + cfg)
        mqtt_server = getConf(parser, "mqtt", "server", "localhost")
        mqtt_port = getConf(parser, "mqtt", "port")
        mqtt_user = getConf(parser, "mqtt", "user")
        mqtt_pass = getConf(parser, "mqtt", "pass")
        if parser.has_option("mqtt", "mac_addresses"):
            macs = parser.get("mqtt", "mac_addresses")
            mqtt_macs = [x.strip() for x in macs.split(",")]

        ifttt_key = getConf(parser, "ifttt", "key")
        if parser.has_option("ifttt", "mac_addresses"):
            macs = parser.get("ifttt", "mac_addresses")
            ifttt_macs = [x.strip() for x in macs.split(",")]
        break

if len(r) == 0:
    print("No config file in " + str(cfgs))

scanner = Scanner().withDelegate(ScanDelegate())

while 1:
    scanner.scan(60.0)

